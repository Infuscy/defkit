-- lookup = require "internal.lookup"

--- DEFAULT ACTION PROPERTIES
go.property("event", msg.url())

--- CUSTOM ACTION PROPERTIES
go.property("NW", false)
go.property("N", false)
go.property("NE", false)
go.property("W", false)
go.property("E", false)
go.property("SW", false)
go.property("S", false)
go.property("SE", false)

go.property("speed_var", hash("WIP"))
go.property("speed_val", 0)
go.property("relative", false)

--- TARGETTING PROPERTIES
go.property("target_self", false)
go.property("target_other", false)
go.property("target_type", hash(""))

function init(self)
	local directions = {}

	if self.NW then
		table.insert(directions, vmath.vector3(-1, 1, 0))
	end

	if self.N then
		table.insert(directions, vmath.vector3(0, 1, 0))
	end

	if self.NE then
		table.insert(directions, vmath.vector3(1, 1, 0))
	end

	if self.W then
		table.insert(directions, vmath.vector3(-1, 0, 0))
	end

	if self.E then
		table.insert(directions, vmath.vector3(1, 0, 0))
	end

	if self.SW then
		table.insert(directions, vmath.vector3(-1, -1, 0))
	end

	if self.S then
		table.insert(directions, vmath.vector3(0, -1, 0))
	end

	if self.SE then
		table.insert(directions, vmath.vector3(1, -1, 0))
	end

	self.directions = directions
end

local function get_force(self)
	-- random between selected directions.
	if next(self.directions) then
		local option = math.random(#self.directions)
		local direction = self.directions[option]
		return direction * self.speed_val
	else
		return vmath.vector3(0)
	end
end

function on_message(self, message_id, message, sender)
	if sender == self.event then
		local velocity = get_force(self)
		if self.target_self then
			msg.post(".", "set_movement", {velocity=velocity, relative=self.relative})
		elseif self.target_other and message.other then
			msg.post(msg.url(nil, message.other), "set_movement", {velocity=velocity, relative=self.relative})
		elseif self.target_type ~= hash("") then
			local group = {} --lookup.get_objects_by_type(self.target_type)
			for _,id in pairs(group) do
				msg.post(msg.url(nil, id), "set_movement", {velocity=velocity, relative=self.relative})
			end
		end
	end
end
